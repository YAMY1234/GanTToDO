欢迎使用 <DDL Manager> 网站项目！

运行本项目前，请阅读本手册，并进行配置，以确保使用顺利。

==========================================================
                                                     目录结构
==========================================================
|-app_release/
      |-app/
            |-templates/（模板文件夹，html 存放处）
            |-static/（img/js/css 资源）
            |-__init__.py
            |-models.py（ User 类，Task 类和 Link 类）
            |-email.py（邮件支持）
            |-api/
                  |-__init__.py
                  |-authentication.py（REST 用户认证）
                  |-errors.py（api 错误处理）
                  |-gantt.py（RESTFUL api 函数）
            |-auth/
                  |-__init__.py
                  |-views.py（用户登录、注册）
            |-main/
                  |-__init__.py
                  |-errors.py（网页状态的错误处理）
                  |-views.py（主要视图函数）
                  |-func.py（其他功能函数）
      |-requirements.txt（需要安装的 python 扩展清单）
      |-config.py（配置信息）
      |-top.py（top调度）
      |-test_data.py（数据库的测试数据）

==========================================================
                                                     python 配置
==========================================================
本项目基于 python 的 flask 框架开发，因此你需要首先安装 python 3，然后安装所需要的一些扩展。

requirements.txt 列出了所需要的 python 扩展，在 cmd 或终端下用 pip list 命令可以查看你已经安装了哪些扩展。
注意，扩展的版本一直在更新，这可能会导致：(a)你安装了某项扩展，但其版本低于 requirements.txt 中的版本。这种情况下，我们强烈建议你更新扩展。(b)你安装的某项扩展，其版本比 requirements.txt 中的版本更高。多数情况下，这不会造成多大影响。但有时则会导致兼容性问题，此时你可以选择重新安装推荐的版本，或访问我们的项目主页获取最新版的项目。

你可以通过 pip install 方式为你的系统安装缺少的扩展，但我们更推荐你使用虚拟环境（由 virtualenv 包支持，详见 https://bitbucket.org/pypa/setuptools），并在这个虚拟环境下使用 pip install -r requirements.txt 命令安装所有需要的扩展。
注意：一定要安装所需扩展，否则此项目将无法在你的主机上运行。

==========================================================
                                                       数据库配置
==========================================================
本项目使用的数据库为 MySQL。你需要先（下载 MySQL Installer 来）安装 MySQL Server（推荐额外勾选安装 MySQL WorkBench），并建立一个模式（schema。里面可以不用建 table ；命名随意）。

然后需要连接到数据库。为此，我们推荐添加环境变量 'DEV_DATABASE_URL'。或者，你也可以更改 config.py 中的相应语句，但是这种方法有**密码泄露**的风险，仅为方便测试而提供。
注意：如果你在本项目的代码中明文书写密码等重要信息，造成的所有后果本项目组概不负责

-----------------------
 config.py
-----------------------
[ 更改前 ]
SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        "mysql://%s:%s@%s:3306/%s?charset=utf8" \
        % ('root', 'password', '127.0.0.1', 'schema name')

[ 更改后 ]
SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        "mysql://%s:%s@%s:3306/%s?charset=utf8" \
        % ('root', '你的数据库密码', '127.0.0.1', '你建立的 schema 的名字')

如果已添加环境变量 'DEV_DATABASE_URL'，则上述修改不会产生影响。

为了初始化建立好的 schema，你需要运行 test_data.py（此代码与其他代码相对独立）。该程序会帮助你建立好并初始化一张 User 表、一张 Task 表和一张 Link 表。你可以在 MySQL WorkBench 中查看，并手动向其中增加、删除数据信息。如果你修改了数据库模型，请相应地修改 models.py 中的定义。注意，test_data.py 提供默认的初始数据，因此其中的模型并不从 models.py 导入。 

完成数据库配置后，可以运行 top.py ，再用浏览器访问 http://127.0.0.1:5000 ，即可开始管理你的 gantt图。

附：测试数据的用户信息
（见 test_data.py）：
账号    密码         用户名    邮箱
1        123456       信小安    test1@qq.com
2        654321       小明        test2@tongji.edu.cn

==========================================================
                                                         运行
==========================================================
top.py 用于启动程序和其他的任务。因此你只需要运行 top.py 即可启动项目。
如果需要，你可以修改 top.py ，使其支持命令行方式启动。
默认的运行模式为开发模式，你可以在 config.py 中选择以其他模式启动。

==========================================================
                                                     其他配置
==========================================================
你可以在 config.py 中查看、修改或添加配置。

==========================================================
                                                     联系我们
==========================================================
如果你在使用过程中有任何建议或意见，欢迎发送电子邮件与我们交流。


DDL Manager Team
2020.12
